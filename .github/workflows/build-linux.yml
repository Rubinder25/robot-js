name: Build Linux
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NVM_OS: linux
      NVM_ARCH: x64
      NODE_VERSIONS: 12.6.0 11.13.0 10.13.0 9.11.2 8.11.3 7.10.1 6.14.3 5.12.0 4.8.0 0.12.18
      ELECTRON_VERSIONS: 6.0.11 5.0.11 4.1.1 4.0.8 3.1.7 3.0.16 2.0.18 1.8.7 1.7.15 1.6.18 1.5.1 1.4.16 1.3.15
    steps:
      - name: Install Apt Pagkages
        run: sudo apt-get install libxinerama-dev libxtst-dev
      - name: Use Cached Node Versions
        uses: actions/cache@v1
        with:
          path: $HOME/.nvm
          key: ${{ env.NVM_OS }}-nvm-${{ env.NODE_VERSIONS }}
          restore-keys: |
            ${{ env.NVM_OS }}-nvm-
      - name: Pre-download Node Binaries
        run: |
          if [ ! -x $HOME/.nvm/nvm.sh ]; then
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
          fi
          for v in $NODE_VERSIONS; do
            dir=$HOME/.nvm/versions/node/v$v
            if [ ! -e $dir ]; then
              mkdir -p $dir
              curl -s https://nodejs.org/dist/v$v/node-v$v-$NVM_OS-$NVM_ARCH.tar.gz \
                | tar -xzC$dir --strip-components=1
            fi
          done
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Use Cached NPM Dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: node_modules
      - name: Install NPM Dependencies
        run: |
          . $HOME/.nvm/nvm.sh
          nvm ls
          nvm use ${NODE_VERSIONS%% *}
          ls -l
          npx npm-add-script -f -k install -v ""
          npm install
      - name: Build
        run: |
          . $HOME/.nvm/nvm.sh
          ./node_modules/.bin/node-pre-gyp clean
          node build_matrix.js "$NODE_VERSIONS" "$ELECTRON_VERSIONS"
